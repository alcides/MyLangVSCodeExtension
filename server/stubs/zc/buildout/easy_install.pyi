import setuptools.package_index
import zc.buildout.rmtree
from typing import Any, Optional

SETUPTOOLS_SUPPORTS_WHEELS: Any

def realpath(path: Any): ...

default_index_url: Any
logger: Any
url_match: Any
is_source_encoding_line: Any
is_win32: Any
is_jython: Any
jython_os_name: Any
has_distribute: Any
has_setuptools: Any
buildout_and_setuptools_path: Any
setuptools_path = buildout_and_setuptools_path
FILE_SCHEME: Any
DUNDER_FILE_PATTERN: Any

class _Monkey:
    def __init__(self, module: Any, **kw: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class _NoWarn:
    def warn(self, *args: Any, **kw: Any) -> None: ...

class AllowHostsPackageIndex(setuptools.package_index.PackageIndex):
    def url_ok(self, url: Any, fatal: bool = ...): ...

clear_index_cache: Any

def call_subprocess(args: Any, **kw: Any) -> None: ...
def get_namespace_package_paths(dist: Any) -> None: ...
def namespace_packages_need_pkg_resources(dist: Any): ...
def dist_needs_pkg_resources(dist: Any): ...

class Installer:
    def __init__(self, dest: Optional[Any] = ..., links: Any = ..., index: Optional[Any] = ..., executable: Any = ..., always_unzip: Optional[Any] = ..., path: Optional[Any] = ..., newest: bool = ..., versions: Optional[Any] = ..., use_dependency_links: Optional[Any] = ..., allow_hosts: Any = ..., check_picked: bool = ..., allow_unknown_extras: bool = ...) -> None: ...
    def install(self, specs: Any, working_set: Optional[Any] = ...): ...
    def build(self, spec: Any, build_ext: Any): ...

def normalize_versions(versions: Any): ...
def default_versions(versions: Optional[Any] = ...): ...
def download_cache(path: int = ...): ...
def install_from_cache(setting: Optional[Any] = ...): ...
def prefer_final(setting: Optional[Any] = ...): ...
def use_dependency_links(setting: Optional[Any] = ...): ...
def allow_picked_versions(setting: Optional[Any] = ...): ...
def store_required_by(setting: Optional[Any] = ...): ...
def get_picked_versions(): ...
def install(specs: Any, dest: Any, links: Any = ..., index: Optional[Any] = ..., executable: Any = ..., always_unzip: Optional[Any] = ..., path: Optional[Any] = ..., working_set: Optional[Any] = ..., newest: bool = ..., versions: Optional[Any] = ..., use_dependency_links: Optional[Any] = ..., allow_hosts: Any = ..., include_site_packages: Optional[Any] = ..., allowed_eggs_from_site_packages: Optional[Any] = ..., check_picked: bool = ..., allow_unknown_extras: bool = ...): ...

buildout_and_setuptools_dists: Any
setuptools_pythonpath: Any

def build(spec: Any, dest: Any, build_ext: Any, links: Any = ..., index: Optional[Any] = ..., executable: Any = ..., path: Optional[Any] = ..., newest: bool = ..., versions: Optional[Any] = ..., allow_hosts: Any = ...): ...
def develop(setup: Any, dest: Any, build_ext: Optional[Any] = ..., executable: Any = ...): ...
def working_set(specs: Any, executable: Any, path: Optional[Any] = ..., include_site_packages: Optional[Any] = ..., allowed_eggs_from_site_packages: Optional[Any] = ...): ...
def scripts(reqs: Any, working_set: Any, executable: Any, dest: Optional[Any] = ..., scripts: Optional[Any] = ..., extra_paths: Any = ..., arguments: str = ..., interpreter: Optional[Any] = ..., initialization: str = ..., relative_paths: bool = ...): ...

relative_paths_setup: str
script_header: str
script_template: Any
distutils_script_template: Any
universal_newline_option: str
py_script_template: Any
runsetup_template: Any

class VersionConflict(zc.buildout.UserError):
    def __init__(self, err: Any, ws: Any) -> None: ...

class MissingDistribution(zc.buildout.UserError):
    data: Any = ...
    def __init__(self, req: Any, ws: Any) -> None: ...

def redo_pyc(egg: Any) -> None: ...

class IncompatibleConstraintError(zc.buildout.UserError): ...
IncompatibleVersionError = IncompatibleConstraintError

def call_easy_install(spec: Any, dest: Any): ...
def unpack_egg(location: Any, dest: Any) -> None: ...

WHEEL_WARNING: str

def unpack_wheel(location: Any, dest: Any) -> None: ...

UNPACKERS: Any
